# Selective Soup | Justin Zou (Piggy), Wen Hao Dong (Jal Hordan), Roshani Shrestha (Pete)
# SoftDev 
# K16: All About Database - SQLITE3 BASICS, notes
# 2021-10-25

Relational database
 
DB that stores information as a collection of tables.

FIELD: Column data in a RDB

RECORD: Row in a RDB
 
Data can be linked between tables based on field values.

SQL (Structured Query Language)

Standard language designed to work with relational dbs.
 
used for many major db programs, though implementations
 may not (mostly are not) be compatible.

eg, some implementations:
MySQL, PostgreSQL, SQLite, Oracle, IBM DB2, Sybase, M$ Access, ... 



SQLite 
 
SQL implementation that relies entirely on function
 calls in the parent program. (no db server)
  
All db info stored in a single file.
  
Data is dynamically typed as values are inserted.



Basic SQLite Operations:
 
CREATE TABLE
  Add a table to a database 
eg,   
CREATE TABLE <name> (<column name> <data type>, ...)
   
data type will help to convert entered values to a suggested type.

data types:    
TEXT, INTEGER, REAL, NUMERIC, BLOB
     
NUMERIC will default to an integer, but can be a floating point.
     
BLOB means no suggested type.



Columns can be given a PRIMARY KEY attribute,
 denoting that every entry in that column is unique
 and cannot be NULL. 
    
Columns can be given a NOT NULL attribute, 
 denoting that no entry can be NULL.



INSERT INTO
  
Insert a record into a table.
   
INSERT INTO <tbl_name> VALUES ( <field 1>, <field 2> ...)
   
Will add a record to a table matching the values
 to the columns in order.
    
NULL can be used in any entry


eg,
CREATE TABLE tpotusa
 (name TEXT, id INTEGER PRIMARY KEY);
 INSERT INTO tpotusa VALUES ("basitar", 2);
 INSERT INTO tpotusa VALUES ("guitbass", 1);
 INSERT INTO tpotusa VALUES ("drums", 0);





eg,
CREATE TABLE amunals
 (name TEXT, id INTEGER PRIMARY KEY);
 INSERT INTO amunals VALUES ("whose-it", 2);
 INSERT INTO amunals VALUES ("whats-it", 1);
 INSERT INTO amunals VALUES ("blurb", 0);



SELECT * FROM <tbl_name>;
   Show all fields for
         each entry (record) in table tbl_name

eg,
SELECT * FROM tpotusa;
SELECT name FROM tpotusa;

eg,
SELECT name FROM tpotusa WHERE id = 0;




SQLite shell is your friend.
Use like IDLE or Python shell to interact live, test, etc.


$ sqlite3 <dbfilename>




shell cmds begin with a dot



some useful SQLITE Shell commands:
  .quit
  .tables
  .header on|off
  .mode column|csv|list|html|insert|line|tabs
  .help




a Python script for interacting with an SQLite db:
import sqlite3 #enable SQLite operations

#open db if exists, otherwise create
db = sqlite3.connect("foo") 

c = db.cursor() #facilitate db ops

c.execute("CREATE TABLE roster(name TEXT,
           userid INTEGER)")

db.commit() #save changes
db.close()
----------------------------------------------------------

NOTES:

Questions:
What does ".header on|off" do? What do the different modes indicate?

Answer: We learned today in class that .header on|off showed the name of the columns above.

Comments:
Each command when ran in the SQLITE shell needs to end with a semicolon.
When running stubby.py, "foo" is created as a db.
The name for the database could be anything, not necessarily "foo".
After entering ".tables" in the SQLite shell, "roster" or the name of the table is printed out.
We can use a variety of options to add values into the table
INSERT INTO table_name VALUES (value1,value2...);
We can also use SET column1 = value1, WHERE condition1.
We can delete values from tables using DELETE FROM <table> WHERE <condition>
We can delete the whole table using DROP TABLE <table>
We can change the width of the table's columns with .width NUM1 NUM2 ... 

After looking up ".mode" online, the different modes seem to indicate output types.
Something to note about the .mode column is that if the value is too long, then it would become cut off.
There are many data types such as TEXT, INTEGER, REAL, NUMERIC, BLOB.
We found that the difference between REAL and NUMERIC was the fact that NUMERIC seems to have more precise decimals than REAL. 
BLOB is something that means no suggested type and NULL can be used at anytime.


".help" provides a lengthy list of SQLite shell commands.

f-strings can be used instead of string concatenation to make the code cleaner.
repr(str) adds quotes around the string str



Concerns:
SELECT * FROM doesn't seem to work in the SQLite shell, but we're not sure why.
Update: It does work, think we forgot the table name or the semicolon.
